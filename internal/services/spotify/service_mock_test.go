// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package spotify is a generated GoMock package.
package spotify

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	spotify "github.com/ilhamrdh/music-catalog-external-api/external/spotify"
)

// MockspotifyOutboung is a mock of spotifyOutboung interface.
type MockspotifyOutboung struct {
	ctrl     *gomock.Controller
	recorder *MockspotifyOutboungMockRecorder
}

// MockspotifyOutboungMockRecorder is the mock recorder for MockspotifyOutboung.
type MockspotifyOutboungMockRecorder struct {
	mock *MockspotifyOutboung
}

// NewMockspotifyOutboung creates a new mock instance.
func NewMockspotifyOutboung(ctrl *gomock.Controller) *MockspotifyOutboung {
	mock := &MockspotifyOutboung{ctrl: ctrl}
	mock.recorder = &MockspotifyOutboungMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockspotifyOutboung) EXPECT() *MockspotifyOutboungMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockspotifyOutboung) Search(ctx context.Context, query string, limit, offset int) (*spotify.SpotifySearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query, limit, offset)
	ret0, _ := ret[0].(*spotify.SpotifySearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockspotifyOutboungMockRecorder) Search(ctx, query, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockspotifyOutboung)(nil).Search), ctx, query, limit, offset)
}
